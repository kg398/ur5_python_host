def kg_client():
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_tool_voltage(24)
  set_input_actions_to_default()
  set_tcp(p[0.0,0.0,0.12,0.0,0.0,0.0])
  set_payload(0.0)
  set_gravity([0.0, 0.0, 9.82])
  $ 1 "BeforeStart"
  $ 2 "var_1≔ False "
  global var_1=  False  
  $ 3 "thread_flag≔ False "
  global thread_flag=  False  
  $ 4 "var_10≔[0,0,0,0,0,0,0,0,0,0]"
  global var_10=[0,0,0,0,0,0,0,0,0,0]
  $ 5 "Set"
  set_tcp(p[0.0,0.0,0.12,0.0,0.0,0.0])
  $ 153 "Thread_1"
  thread Thread_1():
    while (True):
      while (thread_flag==  False  ):
        var_12=0
        sleep(0.01)
      end
      sleep(0.001)
      global var_11=get_tcp_force()
      if (var_11[axis]*var_11[axis]<var_2[11]*var_2[11]):
        var_12=0
      else:
        var_12=var_12+1
        if (var_12>0):
          thread_flag=  False
        end
      end
    end
  end
  threadId_Thread_1 = run Thread_1()
  while (True):
    $ 6 "Robot Program"
    $ 7 "Loop var_1==False"
    while (var_1==False):
      $ 8 "var_1≔socket_open('192.168.1.5',30010)"
      global var_1=socket_open("192.168.1.5",30010)
      $ 9 "Wait: 0.5"
      sleep(0.5)
    end
    $ 10 "Loop var_1== True "
    thread Thread_while_10():
      while (True):
        $ 11 "Wait: 0.001"
        sleep(0.001)
        $ 12 "var_2≔socket_read_ascii_float(12)"
        global var_2=socket_read_ascii_float(12)
        $ 13 "Loop var_2[0]≠12"
        while (var_2[0] != 12):
          $ 14 "var_2≔socket_read_ascii_float(12)"
          global var_2=socket_read_ascii_float(12)
        end
        $ 15 "Switch var_2[1]"
        switch_1 = var_2[1]
        if (0 == switch_1):
          $ 17 "'movejl'"
          # 'movejl'
          $ 18 "var_3≔p[var_2[2],var_2[3],var_2[4],var_2[5],var_2[6],var_2[7]]"
          global var_3=p[var_2[2],var_2[3],var_2[4],var_2[5],var_2[6],var_2[7]]
          $ 19 "movej(var_3,var_2[8],var_2[9],var_2[10],var_2[11])"
          movej(var_3,var_2[8],var_2[9],var_2[10],var_2[11])
          $ 20 "If var_2[12]==0"
          if (var_2[12]==0):
            $ 21 "socket_send_string('completed_pose_move')"
            socket_send_string("completed_pose_move")
          end
        elif (1 == switch_1):
          $ 23 "'movej'"
          # 'movej'
          $ 24 "var_6≔[var_2[2],var_2[3],var_2[4],var_2[5],var_2[6],var_2[7]]"
          global var_6=[var_2[2],var_2[3],var_2[4],var_2[5],var_2[6],var_2[7]]
          $ 25 "movej(var_6,var_2[8],var_2[9],var_2[10],var_2[11])"
          movej(var_6,var_2[8],var_2[9],var_2[10],var_2[11])
          $ 26 "If var_2[12]==0"
          if (var_2[12]==0):
            $ 27 "socket_send_string('completed_joint_move')"
            socket_send_string("completed_joint_move")
          end
        elif (2 == switch_1):
          $ 29 "'movel'"
          # 'movel'
          $ 30 "var_3≔p[var_2[2],var_2[3],var_2[4],var_2[5],var_2[6],var_2[7]]"
          global var_3=p[var_2[2],var_2[3],var_2[4],var_2[5],var_2[6],var_2[7]]
          $ 31 "movel(var_3,var_2[8],var_2[9],var_2[10],var_2[11])"
          movel(var_3,var_2[8],var_2[9],var_2[10],var_2[11])
          $ 32 "If var_2[12]==0"
          if (var_2[12]==0):
            $ 33 "socket_send_string('completed_linear_move')"
            socket_send_string("completed_linear_move")
          end
        elif (3 == switch_1):
          $ 35 "'move to var_3 relative to current pose'"
          # 'move to var_3 relative to current pose'
          $ 36 "var_3≔p[var_2[2],var_2[3],var_2[4],var_2[5],var_2[6],var_2[7]]"
          global var_3=p[var_2[2],var_2[3],var_2[4],var_2[5],var_2[6],var_2[7]]
          $ 37 "var_5≔get_actual_tcp_pose()"
          global var_5=get_actual_tcp_pose()
          $ 38 "movel(pose_trans(var_5,var_3),var_2[8],var_2[9],var_2[10],var_2[11])"
          movel(pose_trans(var_5,var_3),var_2[8],var_2[9],var_2[10],var_2[11])
          $ 39 "If var_2[12]==0"
          if (var_2[12]==0):
            $ 40 "socket_send_string('completed_relative_linear_move')"
            socket_send_string("completed_relative_linear_move")
          end
        elif (4 == switch_1):
          $ 42 "'force move in single axis'"
          # 'force move in single axis'
          $ 43 "var_5≔get_actual_tcp_pose()"
          global var_5=get_actual_tcp_pose()
          $ 44 "If var_2[2]≠0"
          if (var_2[2] != 0):
            $ 45 "var_5[0]=var_5[0]+var_2[2]"
            var_5[0]=var_5[0]+var_2[2]
            $ 46 "axis≔0"
            global axis=0
          else:
            $ 47 "ElseIf var_2[3]≠0"
            if (var_2[3] != 0):
              $ 48 "var_5[1]=var_5[1]+var_2[3]"
              var_5[1]=var_5[1]+var_2[3]
              $ 49 "axis≔1"
              global axis=1
            else:
              $ 50 "ElseIf var_2[4]≠0"
              if (var_2[4] != 0):
                $ 51 "var_5[2]=var_5[2]+var_2[4]"
                var_5[2]=var_5[2]+var_2[4]
                $ 52 "axis≔2"
                global axis=2
              end
            end
          end
          $ 53 "thread_flag= True "
          thread_flag=  True
          $ 54 "Loop thread_flag== True "
          thread Thread_while_54():
            while (True):
              $ 55 "movel(var_5,var_2[8],var_2[9],0,0)"
              movel(var_5,var_2[8],var_2[9],0,0)
              $ 56 "Wait: 0.01"
              sleep(0.01)
              $ 57 "thread_flag= False "
              thread_flag=  False
            end
          end
          if (thread_flag==  True  ):
            global thread_handler_54=run Thread_while_54()
            while (thread_flag==  True  ):
              sync()
            end
            kill thread_handler_54
          end
          $ 58 "stopl(10)"
          stopl(10)
          $ 59 "If var_2[12]==0"
          if (var_2[12]==0):
            $ 60 "socket_send_string('completed_force_move')"
            socket_send_string("completed_force_move")
          end
        elif (5 == switch_1):
          $ 62 "'servoj'"
          # 'servoj'
          $ 63 "var_3≔p[var_2[2],var_2[3],var_2[4],var_2[5],var_2[6],var_2[7]]"
          global var_3=p[var_2[2],var_2[3],var_2[4],var_2[5],var_2[6],var_2[7]]
          $ 64 "If var_2[12]==0"
          if (var_2[12]==0):
            $ 65 "stopl(0.5)"
            stopl(0.5)
          else:
            $ 66 "Else"
            $ 67 "var_14≔get_inverse_kin(var_3)"
            global var_14=get_inverse_kin(var_3)
            $ 68 "servoj(var_14,t=0.05,lookahead_time=0.03,gain=1000)"
            servoj(var_14,t=0.05,lookahead_time=0.03,gain=1000)
          end
          $ 69 "If var_2[12]==0"
          if (var_2[12]==0):
            $ 70 "socket_send_string('completed_servo_move')"
            socket_send_string("completed_servo_move")
          end
        elif (10 == switch_1):
          $ 72 "'return current pose'"
          # 'return current pose'
          $ 73 "var_5≔get_actual_tcp_pose()"
          global var_5=get_actual_tcp_pose()
          $ 74 "socket_send_string(var_5)"
          socket_send_string(var_5)
        elif (11 == switch_1):
          $ 76 "'return current joints'"
          # 'return current joints'
          $ 77 "var_4≔get_actual_joint_positions()"
          global var_4=get_actual_joint_positions()
          $ 78 "socket_send_string(var_4)"
          socket_send_string(var_4)
        elif (12 == switch_1):
          $ 80 "'return inverse kin of pose'"
          # 'return inverse kin of pose'
          $ 81 "var_3≔p[var_2[2],var_2[3],var_2[4],var_2[5],var_2[6],var_2[7]]"
          global var_3=p[var_2[2],var_2[3],var_2[4],var_2[5],var_2[6],var_2[7]]
          $ 82 "socket_send_string(get_inverse_kin(var_3))"
          socket_send_string(get_inverse_kin(var_3))
        elif (13 == switch_1):
          $ 84 "'return translation to get to 2nd pose from 1st pose coord system'"
          # 'return translation to get to 2nd pose from 1st pose coord system'
          $ 85 "var_3≔p[var_2[2],var_2[3],var_2[4],var_2[5],var_2[6],var_2[7]]"
          global var_3=p[var_2[2],var_2[3],var_2[4],var_2[5],var_2[6],var_2[7]]
          $ 86 "var_5≔get_actual_tcp_pose()"
          global var_5=get_actual_tcp_pose()
          $ 87 "socket_send_string(pose_trans(var_5,var_3))"
          socket_send_string(pose_trans(var_5,var_3))
        elif (14 == switch_1):
          $ 89 "'return current forces'"
          # 'return current forces'
          $ 90 "socket_send_string(get_tcp_force())"
          socket_send_string(get_tcp_force())
        elif (15 == switch_1):
          $ 92 "'return force magnitude'"
          # 'return force magnitude'
          $ 93 "socket_send_string(force())"
          socket_send_string(force())
        elif (20 == switch_1):
          $ 95 "'set tcp'"
          # 'set tcp'
          $ 96 "var_3≔p[var_2[2],var_2[3],var_2[4],var_2[5],var_2[6],var_2[7]]"
          global var_3=p[var_2[2],var_2[3],var_2[4],var_2[5],var_2[6],var_2[7]]
          $ 97 "set_tcp(var_3)"
          set_tcp(var_3)
          $ 98 "If var_2[12]==0"
          if (var_2[12]==0):
            $ 99 "socket_send_string('tcp_updated')"
            socket_send_string("tcp_updated")
          end
        elif (21 == switch_1):
          $ 101 "'set payload'"
          # 'set payload'
          $ 102 "set_payload(var_2[8],[var_2[2],var_2[3],var_2[4]])"
          set_payload(var_2[8],[var_2[2],var_2[3],var_2[4]])
          $ 103 "If var_2[12]==0"
          if (var_2[12]==0):
            $ 104 "socket_send_string('payload_updated')"
            socket_send_string("payload_updated")
          end
        elif (30 == switch_1):
          $ 106 "freedrive_mode()"
          freedrive_mode()
          $ 107 "socket_send_string('begin_freedrive_mode')"
          socket_send_string("begin_freedrive_mode")
        elif (31 == switch_1):
          $ 109 "end_freedrive_mode()"
          end_freedrive_mode()
          $ 110 "socket_send_string('end_freedrive_mode')"
          socket_send_string("end_freedrive_mode")
        elif (32 == switch_1):
          $ 112 "socket_send_string('begin_blend_move')"
          socket_send_string("begin_blend_move")
          $ 113 "var_13≔var_2[8]"
          global var_13=var_2[8]
          $ 114 "n≔0"
          global n=0
          $ 115 "Loop n<var_13"
          while (n<var_13):
            $ 116 "n=n+1"
            n=n+1
            $ 117 "Loop var_2[0]≠12"
            while (var_2[0] != 12):
              $ 118 "var_2≔socket_read_ascii_float(12)"
              global var_2=socket_read_ascii_float(12)
            end
            $ 119 "var_3≔p[var_2[2],var_2[3],var_2[4],var_2[5],var_2[6],var_2[7]]"
            global var_3=p[var_2[2],var_2[3],var_2[4],var_2[5],var_2[6],var_2[7]]
            $ 120 "var_10[n] = var_3"
            var_10[n] = var_3
          end
          $ 121 "movel(var_10[0],0.1,0.5,0,0)"
          movel(var_10[0],0.1,0.5,0,0)
          $ 122 "n≔0"
          global n=0
          $ 123 "Loop n<var_13"
          while (n<var_13):
            $ 124 "n=n+1"
            n=n+1
            $ 125 "movep(var_10[n])"
            movep(var_10[n])
          end
        elif (33 == switch_1):
          $ 127 "socket_send_string('begin_blend_move')"
          socket_send_string("begin_blend_move")
        elif (100 == switch_1):
          $ 129 "'reset program'"
          # 'reset program'
          $ 130 "If var_2[12]==0"
          if (var_2[12]==0):
            $ 131 "socket_send_string('resetting...')"
            socket_send_string("resetting...")
          end
          $ 132 "socket_close()"
          socket_close()
          $ 133 "var_1≔ False "
          global var_1=  False  
        elif (101 == switch_1):
          $ 135 "socket_send_string('ready')"
          socket_send_string("ready")
        elif (400 == switch_1):
          $ 137 "'safe move'"
          # 'safe move'
          $ 138 "var_3≔p[var_2[2],var_2[3],var_2[4],var_2[5],var_2[6],var_2[7]]"
          global var_3=p[var_2[2],var_2[3],var_2[4],var_2[5],var_2[6],var_2[7]]
          $ 139 "var_5≔get_actual_tcp_pose()"
          global var_5=get_actual_tcp_pose()
          $ 140 "var_7≔get_inverse_kin(var_3)"
          global var_7=get_inverse_kin(var_3)
          $ 141 "var_8≔get_inverse_kin(var_5)"
          global var_8=get_inverse_kin(var_5)
          $ 142 "var_9≔0"
          global var_9=0
          $ 143 "Loop 6 times"
          Loop_5 = 0
          while (Loop_5 < 6):
            $ 144 "If (var_7[Loop_5]-var_8[Loop_5])>2.0  or  (var_8[Loop_5]-var_7[Loop_5])>2.0"
            if ((var_7[Loop_5]-var_8[Loop_5])>2.0   or   (var_8[Loop_5]-var_7[Loop_5])>2.0):
              $ 145 "var_9=1"
              var_9=1
            end
            Loop_5 = Loop_5 + 1
          end
          $ 147 "If var_9==0"
          if (var_9==0):
            $ 148 "movej(var_3,1,var_2[8],0,0)"
            movej(var_3,1,var_2[8],0,0)
            $ 149 "socket_send_string('completed_pose_move')"
            socket_send_string("completed_pose_move")
          else:
            $ 150 "Else"
            $ 151 "socket_send_string('no_safe_move_found')"
            socket_send_string("no_safe_move_found")
          end
        end
      end
    end
    if (var_1==  True  ):
      global thread_handler_10=run Thread_while_10()
      while (var_1==  True  ):
        sync()
      end
      kill thread_handler_10
    end
  end
end
